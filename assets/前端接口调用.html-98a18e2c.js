import{_ as h,W as s,X as o,Y as e,Z as a,$ as t,a0 as i,C as n}from"./framework-b947aea2.js";const d={},p=i('<h1 id="前端接口调用" tabindex="-1"><a class="header-anchor" href="#前端接口调用" aria-hidden="true">#</a> 前端接口调用</h1><h2 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><h3 id="前后端分离" tabindex="-1"><a class="header-anchor" href="#前后端分离" aria-hidden="true">#</a> 前后端分离</h3><p>前后端分离是一种软件架构风格，其中前端和后端的应用程序逻辑被分开，并通过<strong>API</strong>进行通信。这意味着前端可以使用任何语言或框架来实现用户界面，并使用API从后端获取数据和执行操作。后端则负责处理业务逻辑、数据存储和安全性等方面。这种架构模式通常被用于Web应用程序和移动应用程序的开发。</p><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h3><p>API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><p>最通俗的理解就是一个后端帮你实现好的一个函数，你把参数传给api，api把根据参数得到的结果返回给你，无需关注具体如何实现的，只需要调用即可。</p><h3 id="http请求" tabindex="-1"><a class="header-anchor" href="#http请求" aria-hidden="true">#</a> HTTP请求</h3><p>有很多类型，最常用的是get和post。</p><h4 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> URL</h4><p>url就是web的地址，网站那么多，如何找到它，就依靠url。当然如何找到api，也是根据url，也就是url相当于函数名</p><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h4><p>get和post的参数放的位置不一样</p><h5 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> get</h5>',14),l={href:"https://www.baidu.com/com?from=self&name=xx%EF%BC%8C",target:"_blank",rel:"noopener noreferrer"},c=i('<p>因为get方法的参数在url中，不适合提交敏感表单数据，因为可以通过查看历史记录中的url来获取你提交的数据，这样很不安全。</p><h5 id="post" tabindex="-1"><a class="header-anchor" href="#post" aria-hidden="true">#</a> post</h5><p>post的参数是在body中，也就是有一个包裹，url就是快递单，实际的参数都在包裹里，可以传递很多数据。当然这个包裹有很多种类型。</p><p>受限于请求URL的长度限制，一般参数较少时会使用get请求。（注意，不要被误导，只是为了简单理解才这样说，实际不全是如此）</p><h2 id="教程" tabindex="-1"><a class="header-anchor" href="#教程" aria-hidden="true">#</a> 教程</h2><h3 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用" aria-hidden="true">#</a> 如何使用</h3>',6),u={href:"http://localhost:10404/doc.html#/home",target:"_blank",rel:"noopener noreferrer"},g=i('<p>找到登录-&gt;使用账号密码登录，如下图</p><p>​​<img src="https://img.asfore.ml/vue/image-20230320090309-a4xot4z.png" alt="image" loading="lazy">​​</p><p>之后，点击调试，把username改为admin，password改为123456，之后点击发送，后端启动没问题这时候就会返回结果，如下</p><p>​<img src="https://img.asfore.ml/vue/image-20230320090427-tr6etqs.png" alt="image" loading="lazy">​</p><p>到此，一个post请求就完成了，这也是后端的最后的工作，把api接口测试正确，工作就结束了</p><h3 id="如何在vue中使用" tabindex="-1"><a class="header-anchor" href="#如何在vue中使用" aria-hidden="true">#</a> 如何在vue中使用</h3><p>上述我们使用后端提供的一个网站进行了接口测试，测试正确后就要在前端具体使用了。大多数情况下目前都是使用axios</p><h4 id="axios" tabindex="-1"><a class="header-anchor" href="#axios" aria-hidden="true">#</a> axios</h4><p>axios是一个第三方Ajax库，需要单独安装和引入，在命令行中输入<code>npm install axios --save-D</code>​安装axios的依赖包。接着，在需要使用的地方引入axios对象<code>import axios from axios</code>​，在实际开发中，通常会单独建立一个js文件引入axios引入再进行封装。</p><h4 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h4><p>在毕设的下图位置，有对axios的封装，这个封装是挺完善的，（封装就是axios提供的函数并不是那么好用，自己写个函数来更好地使用axios），实际工作中，根据具体的团队，有不同质量的封装，大多数人没见过好的封装，也不愿意学习，准确说是感觉没必要，也就封装地很差。工作后可以参考这个封装。</p><p>​<img src="https://img.asfore.ml/vue/image-20230320091041-vcyjui7.png" alt="image" loading="lazy">​</p><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h4><p>axios封装好后，就非常容易使用了。</p><p>​<img src="https://img.asfore.ml/vue/image-20230320091519-j95puhh.png" alt="image" loading="lazy">​</p><p>毕设中找到login.js，找到登录方法。这里写了一个函数用来调用接口。</p><p>其中data是参数，url是路径，使用post方法，看起来非常简洁吧，这就是axios封装后的结果，也就是我们使用了封装后的request函数。</p><p>至此，请求函数已经写好了，下面只需要调用这个函数，并把参数写好，即可得到api接口返回的数据。</p><h4 id="api接口函数使用" tabindex="-1"><a class="header-anchor" href="#api接口函数使用" aria-hidden="true">#</a> api接口函数使用</h4><p>函数写好了，就需要在vue文件中使用了</p><p>​<img src="https://img.asfore.ml/vue/image-20230320092039-6tor3u2.png" alt="image" loading="lazy">​</p><p>在vue文件中，并未直接调用这个函数，而是使用vuex，（解释，这是因为登录是全局的，登陆完需要把登录后的状态保存起来，vuex就是存储全局变量的地方）</p><p>因此需要去vuex的store中找到Login这个函数</p><p>​<img src="https://img.asfore.ml/vue/image-20230320092509-t3wsvw6.png" alt="image" loading="lazy">​</p><p>在store文件夹中找到user.js，先引入login，后调用login，之后的.then(res -&gt; 的res就是接口返回的数据</p><p>至此，接口调用就全部完成了，拿到后端接口给的数据，就可以做数据应该做的事情了。</p><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h3><h4 id="then是什么" tabindex="-1"><a class="header-anchor" href="#then是什么" aria-hidden="true">#</a> .then是什么</h4><ol><li>then()方法是异步执行。</li><li>意思是：就是当.then()前的方法执行完后<strong>再</strong>执行then()内部的程序，这样就避免了，数据没获取到等的问题。</li></ol>',29),m={href:"https://www.jianshu.com/p/001d22a44f85",target:"_blank",rel:"noopener noreferrer"},x=e("h4",{id:"vuex",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vuex","aria-hidden":"true"},"#"),a(" vuex")],-1),f=e("p",null,[a("每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的"),e("strong",null,"状态 (state)"),a("。状态也就是数据")],-1),_={href:"https://vuex.vuejs.org/zh/guide/",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,"‍",-1);function v(w,j){const r=n("ExternalLinkIcon");return s(),o("div",null,[p,e("p",null,[a("比如"),e("a",l,[a("https://www.baidu.com/com?from=self&name=xx，"),t(r)]),a(" 其中？后的数据就是请求的参数，并且连接用&，两个参数，form的值self，name的值xx")]),c,e("p",null,[a("想要使用，首先要先有api，运行毕设的后端，在浏览器中输入一个网址，"),e("a",u,[a("http://localhost:10404/doc.html#/home"),t(r)]),a(" ，之后会出现毕设后端提供的所有接口")]),g,e("p",null,[e("a",m,[a("https://www.jianshu.com/p/001d22a44f85"),t(r)])]),x,f,e("p",null,[e("a",_,[a("https://vuex.vuejs.org/zh/guide/"),t(r)])]),b])}const k=h(d,[["render",v],["__file","前端接口调用.html.vue"]]);export{k as default};
